# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
  pull_request:

env:
  # Customize the CMake build type here (Release, Debug, Rel WithDebInfo, etc.)
  BUILD_TYPE: Release
  BUILD_DIR: build

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install packages
        run: sudo apt-get update && sudo apt-get install -y valgrind libsdl2-dev libsdl2-ttf-dev libsdl2-image-dev libsdl2-mixer-dev lcov

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/${{env.BUILD_DIR}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DTESTS=ON -DCLANG_TIDY=ON -DCODE_COVERAGE=ON -DENABLE_VALGRIND=ON

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/${{env.BUILD_DIR}} --config ${{env.BUILD_TYPE}}

      - name: Test
        working-directory: ${{github.workspace}}/${{env.BUILD_DIR}}
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}}

      - name: Code Coverage
        working-directory: ${{github.workspace}}
        run: ./scripts/coverage_html.sh gcc